// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import echo "github.com/labstack/echo/v4"
import hash "github.com/golang-common-packages/hash"
import mock "github.com/stretchr/testify/mock"

import time "time"

// INoSQLKeyValue is an autogenerated mock type for the INoSQLKeyValue type
type INoSQLKeyValue struct {
	mock.Mock
}

// Close provides a mock function with given fields:
func (_m *INoSQLKeyValue) Close() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Delete provides a mock function with given fields: key
func (_m *INoSQLKeyValue) Delete(key string) error {
	ret := _m.Called(key)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(key)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Get provides a mock function with given fields: key
func (_m *INoSQLKeyValue) Get(key string) (interface{}, error) {
	ret := _m.Called(key)

	var r0 interface{}
	if rf, ok := ret.Get(0).(func(string) interface{}); ok {
		r0 = rf(key)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(key)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetCapacity provides a mock function with given fields:
func (_m *INoSQLKeyValue) GetCapacity() (interface{}, error) {
	ret := _m.Called()

	var r0 interface{}
	if rf, ok := ret.Get(0).(func() interface{}); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetNumberOfRecords provides a mock function with given fields:
func (_m *INoSQLKeyValue) GetNumberOfRecords() int {
	ret := _m.Called()

	var r0 int
	if rf, ok := ret.Get(0).(func() int); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int)
	}

	return r0
}

// Middleware provides a mock function with given fields: _a0
func (_m *INoSQLKeyValue) Middleware(_a0 hash.IHash) echo.MiddlewareFunc {
	ret := _m.Called(_a0)

	var r0 echo.MiddlewareFunc
	if rf, ok := ret.Get(0).(func(hash.IHash) echo.MiddlewareFunc); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(echo.MiddlewareFunc)
		}
	}

	return r0
}

// Set provides a mock function with given fields: key, value, expire
func (_m *INoSQLKeyValue) Set(key string, value interface{}, expire time.Duration) error {
	ret := _m.Called(key, value, expire)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, interface{}, time.Duration) error); ok {
		r0 = rf(key, value, expire)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Update provides a mock function with given fields: key, value, expire
func (_m *INoSQLKeyValue) Update(key string, value interface{}, expire time.Duration) error {
	ret := _m.Called(key, value, expire)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, interface{}, time.Duration) error); ok {
		r0 = rf(key, value, expire)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
