// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import io "io"
import mock "github.com/stretchr/testify/mock"

// IFILE is an autogenerated mock type for the IFILE type
type IFILE struct {
	mock.Mock
}

// CreateFolder provides a mock function with given fields: name, parents
func (_m *IFILE) CreateFolder(name string, parents ...string) (interface{}, error) {
	_va := make([]interface{}, len(parents))
	for _i := range parents {
		_va[_i] = parents[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, name)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 interface{}
	if rf, ok := ret.Get(0).(func(string, ...string) interface{}); ok {
		r0 = rf(name, parents...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, ...string) error); ok {
		r1 = rf(name, parents...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Delete provides a mock function with given fields: fileIDs
func (_m *IFILE) Delete(fileIDs []string) error {
	ret := _m.Called(fileIDs)

	var r0 error
	if rf, ok := ret.Get(0).(func([]string) error); ok {
		r0 = rf(fileIDs)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Download provides a mock function with given fields: fileID
func (_m *IFILE) Download(fileID string) (interface{}, error) {
	ret := _m.Called(fileID)

	var r0 interface{}
	if rf, ok := ret.Get(0).(func(string) interface{}); ok {
		r0 = rf(fileID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(fileID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetMetaData provides a mock function with given fields: fileID
func (_m *IFILE) GetMetaData(fileID string) (interface{}, error) {
	ret := _m.Called(fileID)

	var r0 interface{}
	if rf, ok := ret.Get(0).(func(string) interface{}); ok {
		r0 = rf(fileID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(fileID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// List provides a mock function with given fields: pageSize, pageToken
func (_m *IFILE) List(pageSize int64, pageToken ...string) (interface{}, error) {
	_va := make([]interface{}, len(pageToken))
	for _i := range pageToken {
		_va[_i] = pageToken[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, pageSize)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 interface{}
	if rf, ok := ret.Get(0).(func(int64, ...string) interface{}); ok {
		r0 = rf(pageSize, pageToken...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int64, ...string) error); ok {
		r1 = rf(pageSize, pageToken...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Move provides a mock function with given fields: fileID, oldParentID, newParentID
func (_m *IFILE) Move(fileID string, oldParentID string, newParentID string) (interface{}, error) {
	ret := _m.Called(fileID, oldParentID, newParentID)

	var r0 interface{}
	if rf, ok := ret.Get(0).(func(string, string, string) interface{}); ok {
		r0 = rf(fileID, oldParentID, newParentID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string, string) error); ok {
		r1 = rf(fileID, oldParentID, newParentID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Upload provides a mock function with given fields: name, fileContent, parents
func (_m *IFILE) Upload(name string, fileContent io.Reader, parents ...string) (interface{}, error) {
	_va := make([]interface{}, len(parents))
	for _i := range parents {
		_va[_i] = parents[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, name, fileContent)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 interface{}
	if rf, ok := ret.Get(0).(func(string, io.Reader, ...string) interface{}); ok {
		r0 = rf(name, fileContent, parents...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, io.Reader, ...string) error); ok {
		r1 = rf(name, fileContent, parents...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
